name: Build Windows Desktop App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    env:
      TAURI_SIGNING_PRIVATE_KEY: ""
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
      RUST_BACKTRACE: 1
      CI: true
      CARGO_INCREMENTAL: 0
      CARGO_NET_RETRY: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Verify Rust installation
      shell: powershell
      run: |
        Write-Host "Verifying Rust installation..."
        rustc --version
        cargo --version
        rustup target list --installed
        
        Write-Host "Checking if target is installed..."
        if (rustup target list --installed | Select-String "x86_64-pc-windows-msvc") {
          Write-Host "✓ x86_64-pc-windows-msvc target is installed"
        } else {
          Write-Host "Installing x86_64-pc-windows-msvc target..."
          rustup target add x86_64-pc-windows-msvc
        }
        
        Write-Host "Testing Cargo compilation..."
        cd src-tauri
        cargo check --target x86_64-pc-windows-msvc
        cd ..

    - name: Install WebView2
      shell: powershell
      run: |
        Write-Host "Installing Microsoft Edge WebView2..."
        try {
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile "MicrosoftEdgeWebview2Setup.exe" -UseBasicParsing
          Write-Host "Downloaded WebView2 installer"
          Start-Process -FilePath "MicrosoftEdgeWebview2Setup.exe" -ArgumentList "/silent", "/install" -Wait -NoNewWindow
          Write-Host "WebView2 installation completed"
        } catch {
          Write-Host "WebView2 installation failed, but continuing build as it might already be installed"
          Write-Host $_.Exception.Message
        }

    - name: Install frontend dependencies
      shell: powershell
      run: |
        Write-Host "Cleaning npm cache..."
        npm cache clean --force
        Write-Host "Installing dependencies..."
        npm install
        if ($LASTEXITCODE -ne 0) {
          Write-Host "npm install failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        Write-Host "Dependencies installed successfully"

    - name: Clean previous builds
      shell: powershell
      run: |
        Write-Host "Cleaning previous build artifacts..."
        if (Test-Path "build") {
          Remove-Item -Recurse -Force "build"
          Write-Host "Removed old build directory"
        }
        Write-Host "Clean completed (keeping Rust cache)"

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        cache-on-failure: true
        key: windows-build

    - name: Verify Tauri CLI
      shell: powershell
      run: |
        Write-Host "Verifying Tauri CLI installation..."
        npx tauri --version
        Write-Host "Checking available Tauri commands..."
        npx tauri --help
        
        Write-Host "Testing Tauri info command..."
        npx tauri info
        
        Write-Host "Checking Tauri configuration..."
        if (Test-Path "src-tauri/tauri.conf.json") {
          Write-Host "✓ Tauri config file exists"
          Get-Content "src-tauri/tauri.conf.json" | ConvertFrom-Json | ConvertTo-Json -Depth 10
        } else {
          Write-Host "❌ Tauri config file not found"
          exit 1
        }

    - name: Build frontend
      shell: powershell
      run: |
        Write-Host "Building frontend..."
        npm run build
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Frontend build failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        Write-Host "Frontend build completed successfully"

    - name: Verify frontend build
      shell: powershell
      run: |
        Write-Host "Checking frontend build output..."
        if (Test-Path "build") {
          Write-Host "Build directory exists"
          Get-ChildItem "build" | Select-Object Name, Length
        } else {
          Write-Host "ERROR: Build directory not found!"
          exit 1
        }

    - name: Build Windows desktop app
      shell: powershell
      run: |
        Write-Host "Starting Tauri build process..."
        Write-Host "Current directory: $(Get-Location)"
        
        # First, let's try building directly with Tauri CLI
        Write-Host "Method 1: Direct Tauri CLI build"
        try {
          npx @tauri-apps/cli build --target x86_64-pc-windows-msvc --ci --verbose
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ Direct Tauri CLI build succeeded!"
            exit 0
          } else {
            Write-Host "⚠ Direct Tauri CLI build failed with exit code $LASTEXITCODE"
          }
        } catch {
          Write-Host "⚠ Direct Tauri CLI build failed with exception: $($_.Exception.Message)"
        }
        
        # Try method 2: Using npx tauri
        Write-Host "Method 2: Using npx tauri build"
        try {
          npx tauri build --target x86_64-pc-windows-msvc --ci --verbose
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ npx tauri build succeeded!"
            exit 0
          } else {
            Write-Host "⚠ npx tauri build failed with exit code $LASTEXITCODE"
          }
        } catch {
          Write-Host "⚠ npx tauri build failed with exception: $($_.Exception.Message)"
        }
        
        # Try method 3: Using npm script
        Write-Host "Method 3: Using npm script"
        try {
          npm run tauri:build:win
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ npm script build succeeded!"
            exit 0
          } else {
            Write-Host "⚠ npm script build failed with exit code $LASTEXITCODE"
          }
        } catch {
          Write-Host "⚠ npm script build failed with exception: $($_.Exception.Message)"
        }
        
        # Try method 4: Direct cargo build (fallback)
        Write-Host "Method 4: Direct cargo build (fallback)"
        try {
          cd src-tauri
          cargo build --release --target x86_64-pc-windows-msvc
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ Direct cargo build succeeded!"
            cd ..
            exit 0
          } else {
            Write-Host "❌ Direct cargo build failed with exit code $LASTEXITCODE"
            cd ..
            exit $LASTEXITCODE
          }
        } catch {
          Write-Host "❌ Direct cargo build failed with exception: $($_.Exception.Message)"
          cd ..
          exit 1
        }

    - name: List build outputs
      shell: powershell
      run: |
        echo "Checking build outputs..."
        if (Test-Path "src-tauri/target/x86_64-pc-windows-msvc/release/bundle") {
          Get-ChildItem -Recurse "src-tauri/target/x86_64-pc-windows-msvc/release/bundle"
        } else {
          echo "Bundle directory not found"
        }
        if (Test-Path "src-tauri/target/x86_64-pc-windows-msvc/release") {
          Get-ChildItem "src-tauri/target/x86_64-pc-windows-msvc/release" -Filter "*.exe"
        } else {
          echo "Release directory not found"
        }

    - name: Upload Windows Installers
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-installers
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Windows Executable
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-executable
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/*.exe
          src-tauri/target/x86_64-pc-windows-msvc/release/app.exe
          src-tauri/target/x86_64-pc-windows-msvc/release/bids-collector.exe
        retention-days: 30
        if-no-files-found: warn

  build-info:
    runs-on: ubuntu-latest
    needs: build-windows
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Windows Build" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.build-windows.result }}" == "success" ]; then
          echo "✅ **Success** - Windows desktop app built successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available Downloads:**" >> $GITHUB_STEP_SUMMARY
          echo "- Windows MSI Installer" >> $GITHUB_STEP_SUMMARY
          echo "- Windows NSIS Installer" >> $GITHUB_STEP_SUMMARY
          echo "- Windows Executable" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Failed** - Windows build failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Target Platform" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: Windows x64" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture**: x86_64-pc-windows-msvc" >> $GITHUB_STEP_SUMMARY
        echo "- **Bundle Types**: MSI, NSIS" >> $GITHUB_STEP_SUMMARY
