name: Build Electron App

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win
            arch: x64
          - os: macos-latest
            platform: mac
            arch: x64
          - os: macos-latest
            platform: mac
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build SvelteKit app
        run: npm run build

      - name: Build Electron app (Linux)
        if: matrix.platform == 'linux'
        run: npx electron-builder --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Windows)
        if: matrix.platform == 'win'
        run: npx electron-builder --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS x64)
        if: matrix.platform == 'mac' && matrix.arch == 'x64'
        run: npx electron-builder --mac --x64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build Electron app (macOS ARM64)
        if: matrix.platform == 'mac' && matrix.arch == 'arm64'
        run: npx electron-builder --mac --arm64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: List build artifacts
        run: |
          echo "Build artifacts:"
          ls -la dist-electron/ || echo "No dist-electron directory found"

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist-electron/*.AppImage
            dist-electron/*.deb
            dist-electron/latest-linux.yml

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            dist-electron/*.exe
            dist-electron/*.msi
            dist-electron/latest.yml

      - name: Upload artifacts (macOS x64)
        if: matrix.platform == 'mac' && matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-builds
          path: |
            dist-electron/*.dmg
            dist-electron/*.zip
            dist-electron/latest-mac.yml

      - name: Upload artifacts (macOS ARM64)
        if: matrix.platform == 'mac' && matrix.arch == 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-builds
          path: |
            dist-electron/*.dmg
            dist-electron/*.zip
            dist-electron/latest-mac.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all artifacts
        run: |
          echo "All artifacts:"
          find artifacts -type f -name "*" | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.dmg
            artifacts/**/*.zip
          body: |
            ## BIDS Collector Desktop v${{ github.ref_name }}
            
            ### Downloads
            
            **Windows:**
            - `.exe` - Windows installer (recommended)
            - `.msi` - Windows MSI package
            
            **macOS:**
            - `.dmg` - macOS installer
            - Choose the appropriate version for your Mac (Intel x64 or Apple Silicon ARM64)
            
            **Linux:**
            - `.AppImage` - Universal Linux package (recommended)
            - `.deb` - Debian/Ubuntu package
            
            ### Features
            - Professional UI with collapsible sidebar navigation
            - Auth0 authentication integration
            - Job management interface
            - Cross-platform desktop application
            - Modern DaisyUI design system
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Status
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Build completed successfully!"
          else
            echo "❌ Build failed!"
          fi
          
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "✅ Release created successfully!"
          elif [ "${{ needs.release.result }}" == "skipped" ]; then
            echo "ℹ️ Release skipped (not a tag push)"
          else
            echo "❌ Release failed!"
          fi
